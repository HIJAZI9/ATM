package main;

// --------------------------------------------------------
// Code generated by Papyrus Java
// Comments and functionality added manually
// --------------------------------------------------------

/************************************************************/
/**
 * Class that handles ATM data & functionality
 */
public class ATM {
	
	/**
	 * Reference to the customer that is currently logged in (null when no customer is logged in)
	 */
	private CustomerAccount currentCustomer;

	/**
	 * Reference to the instance of DepartmentStore where the ATM is registered
	 */
	private DepartmentStore departmentStore;

	/**
	 * Standard constructor
	 * @param String	Name of the assigned department store (will be created for each instance currently)
	 */
	public ATM(String departmentStoreName) {
		this.departmentStore=new DepartmentStore(departmentStoreName);
		this.currentCustomer=null;
	}

	/**
	 * Sign in of customer by its customer id and PIN
	 * @param pin			Entered PIN
	 * @param kundennummer	Entered customer id
	 * @return				Sign in success (true = success, false = failure)
	 */
	public boolean signIn(int pin, int kundennummer) {
		CustomerAccount person = this.departmentStore.getCustomerAccountById(kundennummer);
		if (person == null)
			return false;
		else if (person.getPIN() == pin) {
			this.currentCustomer = person;
			return true;
		} else
			return false;
	}

	/**
	 * Method to pay in money
	 * @param sum	Sum to pay in
	 * @return		Pay in success (true = success, false = failure)
	 */
	public boolean payIn(Double sum) {
		if (this.currentCustomer != null) {
			this.currentCustomer.updateBalance(sum);
			return true;
		} else
			return false;
	}

	/**
	 * Method to pay out money
	 * @param sum	Sum to pay out
	 * @return		Pay out success (true = success, false = failure)
	 */
	public boolean payOut(Double sum) {
		Double balance=this.getBalance();
		if (this.currentCustomer != null) {
			if((balance-sum)==0||(balance-sum)>0) {
				this.currentCustomer.updateBalance(-1*sum);
				return true;
			} else {
				return false;
			}
	  }	else
			return false;
	}

	/**
	 * Method to get the balance of the current customer account
	 * @return	Account balance or null (if no customer is logged in)
	 */
	public Double getBalance() {
		if (this.currentCustomer != null)
			return this.currentCustomer.getBalance();
		else
			return null;
	}

	/**
	 * Method to sign out (sets currentCustomer to null)
	 */
	public void signOut() {
		this.currentCustomer=null;
	}

}
