package main;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonWriter;

// --------------------------------------------------------
// Code generated by Papyrus Java
// Comments and functionality added manually
// --------------------------------------------------------

/************************************************************/
/**
 * Class that handles the department store data and its customer accounts
 */
public class DepartmentStore {
	
	/**
	 * Name of the department store
	 */
	private String name;
	
	/**
	 * ArrayList of assigned customer accounts
	 */
	private ArrayList<CustomerAccount> customerAccounts;
	
	/**
	 * Path of currently used JSON data file for customer data (used to save changed values)
	 */
	private String jsonPathCustomerData = null;

	/**
	 * Standard constructor
	 */
	public DepartmentStore() {
		// set initial values
		this.name = "Unnamed Department Store";
		this.customerAccounts = new ArrayList<CustomerAccount>();
	}

	/**
	 * Get a specific customer account by its customer id
	 * @param id	Customer ID
	 * @return		Customer account with specified id (null if no account was found)
	 */
	public CustomerAccount getCustomerAccountById(String id) {
		for (CustomerAccount person: this.customerAccounts) {
			if (id.equals(person.getID())) {
				return person;
			}
		}
		return null;
	}

	/**
	 * Assign a new customer account to the department store
	 * @param customerAccount	Customer account to be added
	 */
	public void addCustomerAccount(CustomerAccount customerAccount) {
		this.customerAccounts.add(customerAccount);
	}

	/**
	 * Remove a specific customer account by its customer id
	 * @param id	Customer ID
	 */
	public void removeCustomerAccountById(String id) {
		ArrayList<CustomerAccount> newList=new ArrayList<CustomerAccount>();
		for (CustomerAccount person: this.customerAccounts) {
			if (person.getID() != id)
				newList.add(person);
		}
		this.customerAccounts = newList;
	}

	/**
	 * Return the name of the department store
	 * @return		Department store name
	 */
	public String getName() {
		 return this.name;
	}

	/**
	 * Set a new department store name
	 * @param name	New name
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Load all department store data from a JSON file (excluding customer data)
	 * @param jsonPath	Path to the JSON file
	 */
	public void loadDataFromFile(final String jsonPath) {
		
		// read json file into string
		String jsonString = null;
		try {
			jsonString = this.readJSONFileToString(jsonPath);
		} catch (Exception e) {
			return; // use already existing default values
		}
		
		// read json
		JsonReader jsonReader = Json.createReader(new StringReader(jsonString));
		JsonObject jsonObject = jsonReader.readObject();
		
		// apply data
		this.setName(jsonObject.getString("name"));
	}
	
	/**
	 * Save current customer data into a JSON file
	 */
	public void saveCustomerDataToFile() {
		
		// do nothing if no file is set
		if (this.jsonPathCustomerData == null) return;
		
		// create file output stream
		FileOutputStream osJsonFile;
		
		try {
			osJsonFile = new FileOutputStream(new File(this.jsonPathCustomerData));
		} catch (Exception e) {
			return;
		}
		
		// write data into json file
		JsonWriter jsonWriter = Json.createWriter(osJsonFile);
		JsonArrayBuilder jsonBuilder = Json.createArrayBuilder();
		for (CustomerAccount account : this.customerAccounts) {
			jsonBuilder.add(
					Json.createObjectBuilder()
						.add("customerName", account.getName())
						.add("ID", account.getID())
						.add("PIN", account.getPIN())
						.add("balance", account.getBalance())
						.build());
		}
		jsonWriter.write(jsonBuilder.build());
	}
	
	/**
	 * Load all customer data from a JSON file
	 * @param jsonPath	Path to the JSON file
	 */
	public void loadCustomerDataFromFile(final String jsonPath) {
		
		// read json file into string
		String jsonString = null;
		try {
			jsonString = this.readJSONFileToString(jsonPath);
		} catch (Exception e) {
			return; // use already existing values
		}
		
		// remove current customer data & update path to current file
		this.customerAccounts = new ArrayList<CustomerAccount>();
		this.jsonPathCustomerData = jsonPath;
		
		// read json
		JsonReader jsonReader = Json.createReader(new StringReader(jsonString));
		JsonArray jsonArray = jsonReader.readArray();
		
		// apply data
		for (JsonObject obj : jsonArray.getValuesAs(JsonObject.class)) {
			this.addCustomerAccount(new CustomerAccount(
				obj.getString("customerName"),
				obj.getString("ID"),
				obj.getString("PIN"),
				obj.getJsonNumber("balance").doubleValue()
			));
		}
	}
	
	/**
	 * Utility method to read a full JSON file into a string
	 * @param jsonPath	Path to the JSON file
	 * @return			String of all file contents
	 * @throws IOException
	 */
	private String readJSONFileToString(final String filePath) throws IOException {
		String fileContent = new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8);
		return fileContent;
	}
}
