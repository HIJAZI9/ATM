package main;

// --------------------------------------------------------
// Code generated by Papyrus Java
// Comments and functionality added manually
// --------------------------------------------------------

/************************************************************/
/**
 * Class that handles ATM data & functionality
 */
public class ATM {
	
	/**
	 * Reference to the customer that is currently logged in (null when no customer is logged in)
	 */
	private CustomerAccount currentCustomer;

	/**
	 * Reference to the instance of DepartmentStore where the ATM is registered
	 */
	private DepartmentStore departmentStore;

	/**
	 * Standard constructor
	 * @param String	Name of the assigned department store (will be created for each instance currently)
	 */
	public ATM() {
		// set initial values
		this.departmentStore = new DepartmentStore();
		this.currentCustomer = null;
		
		// load department store data
		this.loadDepartmentStoreData();
	}

	/**
	 * Sign in of customer by its customer id and PIN
	 * @param kundennummer	Entered customer id
	 * @param pin			Entered PIN
	 * @return				Sign in success (true = success, false = failure)
	 */
	public boolean signIn(String kundennummer, String pin) {
		this.currentCustomer = this.departmentStore.getCustomerAccountById(kundennummer);
		if (this.currentCustomer == null) {
			return false;
		} else if (pin.equals(this.currentCustomer.getPIN())) {
			return true;
		} else {
			this.currentCustomer = null;
			return false;
		}
	}

	/**
	 * Method to pay in money
	 * @param sum	Sum to pay in
	 * @return		Pay in success (true = success, false = failure)
	 */
	public boolean payIn(Double sum) {
		if (this.currentCustomer != null) {
			this.currentCustomer.updateBalance(sum);
			return true;
		} else
			return false;
	}

	/**
	 * Method to pay out money
	 * @param sum	Sum to pay out
	 * @return		Pay out success (true = success, false = failure)
	 */
	public boolean payOut(Double sum) {
		Double balance=this.getBalance();
		if (this.currentCustomer != null) {
			if((balance-sum)==0||(balance-sum)>0) {
				this.currentCustomer.updateBalance(-1*sum);
				return true;
			} else {
				return false;
			}
	  }	else
			return false;
	}

	/**
	 * Method to get the balance of the current customer account
	 * @return	Account balance or null (if no customer is logged in)
	 */
	public Double getBalance() {
		return this.currentCustomer != null ? this.currentCustomer.getBalance() : 0d;
	}

	/**
	 * Method to sign out (sets currentCustomer to null)
	 */
	public void signOut() {
		this.currentCustomer = null;
		this.departmentStore.saveCustomerDataToFile();
	}
	
	/**
	 * Method for loading department store data including customer data (using data format JSON)
	 */
	private void loadDepartmentStoreData() {
		// data file paths (constants)
		final String depStoreDataPath = "res/department_store_data.json";
		final String customerDataPath = "res/customer_data.json";
		
		// load data
		this.departmentStore.loadDataFromFile(depStoreDataPath);
		this.departmentStore.loadCustomerDataFromFile(customerDataPath);
	}
}
